class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        //sort(nums.begin(),nums.end());
        //return nums[nums.size()-k];
        priority_queue<int,vector<int>,greater<int>> KMinHeap(nums.begin(),nums.begin()+k);
        for(size_t i=k;i<nums.size();i++)
        {
            if(nums[i]>KMinHeap.top())
            {
                //swap(KMinHeap.top(),nums[i]);
                KMinHeap.pop();
                KMinHeap.push(nums[i]);
            }
        }
        return KMinHeap.top();
    }
};
