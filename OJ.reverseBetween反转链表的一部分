给你单链表的头针头和两个活动左右，左<=右。请你从位置左到位置右的链表节点，返回反转后的链表。
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution 
{
public:
    void reverseLinkedList(ListNode *head) 
    {
        // 也可以使用递归反转一个链表
        ListNode *pre = nullptr;
        ListNode *cur = head;

        while (cur != nullptr) {
            ListNode *next = cur->next;
            cur->next = pre;
            pre = cur;
            cur = next;
        }
    }

    ListNode* reverseBetween(ListNode* head, int left, int right) 
    {
        ListNode*dummyHead=new ListNode(-1);
        dummyHead->next=head;
        ListNode*prevL=dummyHead;
        for(int i=0;i<left-1;i++)
        {
            prevL=prevL->next;
        }
        ListNode*rightNode=prevL;
        for(int i=0;i<right-left+1;i++)
        {
            rightNode=rightNode->next;
        }
        ListNode *leftNode=prevL->next;
        ListNode *nextR = rightNode->next;
        prevL->next=nullptr;
        rightNode->next=nullptr;

        reverseLinkedList(leftNode);
        prevL->next=rightNode;
        leftNode->next=nextR;
        return dummyHead->next;
      
    }
};
